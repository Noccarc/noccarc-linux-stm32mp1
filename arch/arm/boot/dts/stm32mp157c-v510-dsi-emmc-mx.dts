/* SPDX-License-Identifier: (GPL-2.0+ OR BSD-3-Clause) */
/*
	* Copyright (C) STMicroelectronics 2022 - All Rights Reserved
	* Author: STM32CubeMX code generation for STMicroelectronics.
	*/

/* For more information on Device Tree configuration, please refer to
	* https://wiki.st.com/stm32mpu/wiki/Category:Device_tree_configuration
	*/

/dts-v1/;
#include <dt-bindings/pinctrl/stm32-pinfunc.h>

#include "stm32mp157.dtsi"
#include "stm32mp15xc.dtsi"
#include "stm32mp15xxac-pinctrl.dtsi"
#include "stm32mp15-m4-srm.dtsi"

/* USER CODE BEGIN includes */
#include <dt-bindings/gpio/gpio.h>
#include <dt-bindings/mfd/st,stpmic1.h>
#include <dt-bindings/rtc/rtc-stm32.h>
#include <dt-bindings/input/input.h>
#include <dt-bindings/pwm/pwm.h>


/* USER CODE END includes */

/ {
	model = "STMicroelectronics custom STM32CubeMX board";
	compatible = "st,stm32mp157c-v510-dsi-emmc-mx", "st,stm32mp157";

	memory@c0000000 {
		device_type = "memory";
		reg = <0xc0000000 0x20000000>;

		/* USER CODE BEGIN memory */
		/* USER CODE END memory */
	};

	reserved-memory {
		#address-cells = <1>;
		#size-cells = <1>;
		ranges;

		/* USER CODE BEGIN reserved-memory */

		mcuram2:mcuram2@10000000{
			compatible = "shared-dma-pool";
			reg = <0x10000000 0x40000>;
			no-map;
		};

		vdev0vring0:vdev0vring0@10040000{
			compatible = "shared-dma-pool";
			reg = <0x10040000 0x1000>;
			no-map;
		};

		vdev0vring1:vdev0vring1@10041000{
			compatible = "shared-dma-pool";
			reg = <0x10041000 0x1000>;
			no-map;
		};

		vdev0buffer:vdev0buffer@10042000{
			compatible = "shared-dma-pool";
			reg = <0x10042000 0x4000>;
			no-map;
		};

		mcu_rsc_table:mcu_rsc_table@10048000{
			compatible = "shared-dma-pool";
			reg = <0x10048000 0x8000>;
			no-map;
		};

		mcuram:mcuram@30000000{
			compatible = "shared-dma-pool";
			reg = <0x30000000 0x40000>;
			no-map;
		};

		retram:retram@38000000{
			compatible = "shared-dma-pool";
			reg = <0x38000000 0x10000>;
			no-map;
		};

		gpu_reserved:gpu@d4000000{
			reg = <0xd4000000 0x4000000>;
			no-map;
		};
		/* USER CODE END reserved-memory */
	};

	/* USER CODE BEGIN root */

	aliases{
		ethernet0 = &ethernet0;
		serial0 = &uart4;
		serial1 = &uart7;
	};

	led{
		compatible = "gpio-leds";

		led-0{
			label = "status";
			gpios = <&gpioa 15 GPIO_ACTIVE_HIGH>;
			linux,default-trigger = "heartbeat";
			default-state = "on";
		};
		
		led-1{
			label = "fan";
			gpios = <&gpioc 3 GPIO_ACTIVE_HIGH>;
			linux,default-trigger = "none";
			default-state = "on";
		};

		led-2{
			label = "iomt";
			gpios = <&gpioi 9 GPIO_ACTIVE_HIGH>;
			linux,default-trigger = "none";
			default-state = "on";
		};

		led-3{
			label = "jtag";
			gpios = <&gpioe 12 GPIO_ACTIVE_HIGH>;
			linux,default-trigger = "none";
			default-state = "off";
		};

		led-4{
			label = "3v3-control";
			gpios = <&gpiod 10 GPIO_ACTIVE_HIGH>;
			linux,default-trigger = "none";
			default-state = "on";
		};

	};

	visual-alarm {
		compatible = "pwm-leds";
		led-blue {
			label = "led-blue";
			pwms = <&pwm1 0 1000000 0>;
			linux,default-trigger = "default-on";
			brightness = <60>;
			max-brightness = <127>;
		};

		led-red {
			label = "led-red";
			pwms = <&pwm2 0 1000000 0>;
			max-brightness = <127>;
		};

		led-green {
			label = "led-green";
			pwms = <&pwm3 2 1000000 0>;
			max-brightness = <127>;
			linux,default-trigger = "default-on";
			brightness = <60>;
		};
	};

	power-button {
		compatible = "gpio-keys";
		#size-cells = <0>;

		btn-0{
			label = "PWR_SW";
			gpios = <&gpioi 0 GPIO_ACTIVE_LOW>;
			gpio-key,wakeup;
			linux,code = <KEY_POWER> ;
		};
	};

	encoder-button {
		compatible = "gpio-keys";
		#size-cells = <0>;
		btn-1{
			label = "ROT_SW";
			gpios = <&gpioh 6 GPIO_ACTIVE_LOW>; 
			linux,code = <KEY_SELECT> ;
		};
	};
	
	panel {
		compatible = "tianma,nlb150xg01l-01";
		backlight = <&panel_backlight>;
		reset-gpios = <&gpiof 0 GPIO_ACTIVE_HIGH>;
		power-supply = <&vdd>;
		status = "okay";
		port {
			panel_in: endpoint {
				remote-endpoint = <&bridge_out>;
			};
		};
	};

	usb_phy_tuning:usb-phy-tuning{
		st,hs-dc-level = <2>;
		st,fs-rftime-tuning;
		st,hs-rftime-reduction;
		st,hs-current-trim = <15>;
		st,hs-impedance-trim = <1>;
		st,squelch-level = <3>;
		st,hs-rx-offset = <2>;
		st,no-lsfs-sc;
	};

	vin:vin{
		compatible = "regulator-fixed";
		regulator-name = "vin";
		regulator-min-microvolt = <5000000>;
		regulator-max-microvolt = <5000000>;
		regulator-always-on;
	};

	chosen{
		stdout-path = "serial0:115200n8";
	};
	
	// Panel brightness should be changed from 500 to 1000 
	panel_backlight: panel-backlight {
		compatible = "pwm-backlight";
		pwms = <&pwm13 0 500000>;	//2KHz backlit frequency
		enable-gpios = <&gpioe 15 GPIO_ACTIVE_HIGH>;
		brightness-levels = <0 2048>;
		num-interpolated-steps = <2048>;
		default-brightness-level = <1000>;
		status = "okay";
	};

	/* USER CODE END root */	

	clocks {
		/* USER CODE BEGIN clocks */
		/* USER CODE END clocks */

#ifndef CONFIG_TFABOOT
		clk_lsi: clk-lsi {
			clock-frequency = <32000>;
		};
		clk_hsi: clk-hsi {
			clock-frequency = <64000000>;
		};
		clk_csi: clk-csi {
			clock-frequency = <4000000>;
		};
		clk_lse: clk-lse {
			clock-frequency = <32768>;
		};
		clk_hse: clk-hse {
			clock-frequency = <24000000>;
		};
#endif	/*CONFIG_TFABOOT*/
	};

}; /*root*/

&m4_rproc{
	/*Restriction: "memory-region" property is not managed - please to use User-Section if needed*/
	mboxes = <&ipcc 0>, <&ipcc 1>, <&ipcc 2>;
	mbox-names = "vq0", "vq1", "shutdown";
	status = "disabled";

	/* USER CODE BEGIN m4_rproc */
	memory-region = <&retram>, <&mcuram>, <&mcuram2>, <&vdev0vring0>,
			<&vdev0vring1>, <&vdev0buffer>, <&mcu_rsc_table>;
	interrupt-parent = <&exti>;
	interrupts = <68 1>;
	wakeup-source;
	/* USER CODE END m4_rproc */

	m4_system_resources{
		status = "disabled";

		/* USER CODE BEGIN m4_system_resources */
		/* USER CODE END m4_system_resources */
	};
};

&bsec{
	status = "okay";

	/* USER CODE BEGIN bsec */
	/* USER CODE END bsec */
};

&crc1{
	status = "okay";

	/* USER CODE BEGIN crc1 */
	/* USER CODE END crc1 */
};

&cryp1{
	u-boot,dm-pre-reloc;
	status = "okay";

	/* USER CODE BEGIN cryp1 */
	/* USER CODE END cryp1 */
};

&dma1{
	status = "okay";

	/* USER CODE BEGIN dma1 */
	sram = <&dma_pool>;
	/* USER CODE END dma1 */
};

&dma2{
	status = "okay";

	/* USER CODE BEGIN dma2 */
	sram = <&dma_pool>;	
	/* USER CODE END dma2 */
};

&dmamux1{

	dma-masters = <&dma1 &dma2>;
	dma-channels = <16>;

	status = "okay";

	/* USER CODE BEGIN dmamux1 */
	/* USER CODE END dmamux1 */
};

&dsi{
		#address-cells = <1>;
	#size-cells = <0>;
	status = "okay";

	/* USER CODE BEGIN dsi */

	ports{
	
		#address-cells = <1>;
		#size-cells = <0>;

		port@0{
			reg = <0>;

			dsi_in:endpoint{
				remote-endpoint = <&ltdc_ep1_out>;
			};
		};

		port@1{
			reg = <1>;

			dsi_out:endpoint{
				remote-endpoint = <&bridge_in>;
				data-lanes = <0 1>;
				attach-bridge;
			};
		};
	};

	
	
	/* USER CODE END dsi */
};

&dts{
	status = "okay";

	/* USER CODE BEGIN dts */
	/* USER CODE END dts */
};

&ethernet0{
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&eth1_pins_mx>;
	pinctrl-1 = <&eth1_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN ethernet0 */
	phy-mode = "rmii";
	max-speed = <100>;
	phy-handle = <&phy0>;
		st,ext-phyclk;
	mdio0 {
		#address-cells = <1>;
		#size-cells = <0>;
		compatible = "snps,dwmac-mdio";

		phy0: ethernet-phy@1 {
			reg = <1>;
			/* LAN8710Ai */
			compatible = "ethernet-phy-id0007.c0f0",
						"ethernet-phy-ieee802.3-c22";
			reset-gpios = <&gpiog 0 GPIO_ACTIVE_LOW>;
			reset-assert-us = <1000>;
			reset-deassert-us = <1000>;
			smsc,disable-energy-detect;
			status="okay";
		};
	};
	/* USER CODE END ethernet0 */
};

&gpu{
	status = "okay";

	/* USER CODE BEGIN gpu */
	contiguous-area = <&gpu_reserved>;
	/* USER CODE END gpu */
};

&hash1{
	u-boot,dm-pre-reloc;
	status = "okay";

	/* USER CODE BEGIN hash1 */
	/* USER CODE END hash1 */
};

&hsem{
	status = "okay";

	/* USER CODE BEGIN hsem */
	/* USER CODE END hsem */
};

&i2c4{
	u-boot,dm-pre-reloc;
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&i2c4_pins_z_mx>;
	pinctrl-1 = <&i2c4_sleep_pins_z_mx>;
	status = "okay";
	/* spare dmas for other usage */
	/delete-property/dmas;
	/delete-property/dma-names;

	/* USER CODE BEGIN i2c4 */
	i2c-scl-rising-time-ns = <185>;
	i2c-scl-falling-time-ns = <20>;
	clock-frequency = <400000>;

	
	max11601@64{
		compatible = "maxim,max11601";
		reg = <0x64>;
		vcc-supply = <&v3v3>;
	};
	
	bridge@2c {
		compatible = "ti,sn65dsi83";
		status = "okay";
		reg = <0x2c>;
		vdd-supply = <&vdd>;
		vcc-supply = <&vdd>;
		enable-gpios = <&gpiob 10 GPIO_ACTIVE_HIGH>;
		ports {
			#address-cells = <1>;
			#size-cells = <0>;
			port@0 {
				reg = <0>;
				bridge_in: endpoint {
					remote-endpoint = <&dsi_out>;
				};
			};
			port@1 {
				reg = <1>;
				bridge_out: endpoint {
					remote-endpoint = <&panel_in>;
				};
			};
		};
		
	};

	als@23{
		compatible = "rohm,bh1750";
		reg = <0x23>;
		status = "okay";
	};
	
	sht4x@44{
		compatible = "sht4x";
		reg = <0x44>;
		status = "okay";
	};
	
	pmic:stpmic@33{
		compatible = "st,stpmic1";
		reg = <0x33>;
		interrupts-extended = <&exti_pwr 55 IRQ_TYPE_EDGE_FALLING>;
		interrupt-controller;
		#interrupt-cells = <2>;
		status = "okay";

		regulators{
			compatible = "st,stpmic1-regulators";
			buck1-supply = <&vin>;
			buck2-supply = <&vin>;
			buck3-supply = <&vin>;
			buck4-supply = <&vin>;
			ldo1-supply = <&v3v3>;
			ldo2-supply = <&vin>;
			ldo3-supply = <&vdd_ddr>;
			ldo4-supply = <&vin>;
			ldo5-supply = <&vin>;
			ldo6-supply = <&v3v3>;
			vref_ddr-supply = <&vin>;
			boost-supply = <&vin>;
			pwr_sw1-supply = <&bst_out>;
			pwr_sw2-supply = <&bst_out>;

			vddcore:buck1{
				regulator-name = "vddcore";
				regulator-min-microvolt = <1200000>;
				regulator-max-microvolt = <1350000>;
				regulator-always-on;
				regulator-initial-mode = <0>;
				regulator-over-current-protection;
			};

			vdd_ddr:buck2{
				regulator-name = "vdd_ddr";
				regulator-min-microvolt = <1350000>;
				regulator-max-microvolt = <1350000>;
				regulator-always-on;
				regulator-initial-mode = <0>;
				regulator-over-current-protection;
			};

			vdd:buck3{
				regulator-name = "vdd";
				regulator-min-microvolt = <3300000>;
				regulator-max-microvolt = <3300000>;
				regulator-always-on;
				st,mask-reset;
				regulator-initial-mode = <0>;
				regulator-over-current-protection;
			};

			v3v3:buck4{
				regulator-name = "v3v3";
				regulator-min-microvolt = <3300000>;
				regulator-max-microvolt = <3300000>;
				regulator-always-on;
				regulator-over-current-protection;
				regulator-initial-mode = <0>;
			};

			v1v8_audio:ldo1{
				regulator-name = "v1v8_audio";
				regulator-min-microvolt = <1800000>;
				regulator-max-microvolt = <1800000>;
				regulator-always-on;
				interrupts = <IT_CURLIM_LDO1 0>;
			};

			v3v3_hdmi:ldo2{
				regulator-name = "v3v3_hdmi";
				regulator-min-microvolt = <3300000>;
				regulator-max-microvolt = <3300000>;
				interrupts = <IT_CURLIM_LDO2 0>;
			};

			vtt_ddr:ldo3{
				regulator-name = "vtt_ddr";
				regulator-min-microvolt = <500000>;
				regulator-max-microvolt = <750000>;
				regulator-always-on;
				regulator-over-current-protection;
			};

			vdd_usb:ldo4{
				regulator-name = "vdd_usb";
				interrupts = <IT_CURLIM_LDO4 0>;
			};

			vdda:ldo5{
				regulator-name = "vdda";
				regulator-min-microvolt = <2900000>;
				regulator-max-microvolt = <2900000>;
				interrupts = <IT_CURLIM_LDO5 0>;
				regulator-boot-on;
			};

			v1v2_hdmi:ldo6{
				regulator-name = "v1v2_hdmi";
				regulator-min-microvolt = <1200000>;
				regulator-max-microvolt = <1200000>;
				interrupts = <IT_CURLIM_LDO6 0>;
			};

			vref_ddr:vref_ddr{
				regulator-name = "vref_ddr";
				regulator-always-on;
				regulator-over-current-protection;
			};

			bst_out:boost{
				regulator-name = "bst_out";
				interrupts = <IT_OCP_BOOST 0>;
			};

			vbus_otg:pwr_sw1{
				regulator-name = "vbus_otg";
				interrupts = <IT_OCP_OTG 0>;
			};

			vbus_sw:pwr_sw2{
				regulator-name = "vbus_sw";
				interrupts = <IT_OCP_SWOUT 0>;
				regulator-active-discharge = <1>;
			};
		};

		onkey{
			compatible = "st,stpmic1-onkey";
			interrupts = <IT_PONKEY_F 0>, <IT_PONKEY_R 0>;
			interrupt-names = "onkey-falling", "onkey-rising";
			power-off-time-sec = <10>;
			status = "okay";
		};

		watchdog{
			compatible = "st,stpmic1-wdt";
			status = "disabled";
		};
	};
	/* USER CODE END i2c4 */
};

&i2c6{
	u-boot,dm-pre-reloc;
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&i2c6_pins_mx>;
	pinctrl-1 = <&i2c6_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN i2c6 */

	i2c-scl-rising-time-ns = <185>;
	i2c-scl-falling-time-ns = <20>;
	clock-frequency = <400000>;
	dmas = <&mdma1 38 0x0 0x40008 0x0 0x0 0>,
			<&mdma1 39 0x0 0x40002 0x0 0x0 0>;
	dma-names = "rx", "tx";

	// polytouch: eegalax-ts@2a {
	// 	compatible = "hid-over-i2c";
	// 	reg = <0x2a>;
	// 	hid-descr-addr = <0x000f>;
	// 	interrupt-parent = <&gpioe>;
	// 	interrupts = <13 IRQ_TYPE_LEVEL_LOW>;


	// 	touchscreen-size-x = <1024>;
	// 	touchscreen-size-y = <768>;
	// 	touchscreen-inverted-x;
	// 	touchscreen-inverted-y;
	// 	status="okay";
	// };
	touchscreen@41 {
                compatible = "ilitek,ili251x";
                reg = <0x41>;
                interrupt-parent = <&gpioe>;
				// touchscreen-inverted-x;
		 		// touchscreen-inverted-y;
				touchscreen-size-x = <1024>;
				touchscreen-size-y = <768>;
                interrupts = <13 IRQ_TYPE_LEVEL_LOW>;
                // reset-gpios = <&pinctrl RZG2L_GPIO(46, 3) GPIO_ACTIVE_LOW>;
				max-fingers = <5>;
				status="okay";
        };
	/* USER CODE END i2c6 */
};

&ipcc{
	status = "okay";

	/* USER CODE BEGIN ipcc */
	/* USER CODE END ipcc */
};

&iwdg2{
	status = "okay";

	/* USER CODE BEGIN iwdg2 */
	timeout-sec = <32>;
	/* USER CODE END iwdg2 */
};

&lptimer2{
	status = "okay";

	/* USER CODE BEGIN lptimer2 */
	/* USER CODE END lptimer2 */

	counter{
		compatible = "st,stm32-lptimer-counter";
		pinctrl-names = "default", "sleep";
		pinctrl-0 = <&lptim2_counter_pins_mx>;
		pinctrl-1 = <&lptim2_counter_sleep_pins_mx>;
		status = "okay";

		/* USER CODE BEGIN lptimer2_counter */
		/* USER CODE END lptimer2_counter */
	};
};

&ltdc{
	status = "okay";

	/* USER CODE BEGIN ltdc */

	port{

		ltdc_ep1_out:endpoint@0{
			reg = <0>;
			remote-endpoint = <&dsi_in>;
		};
	};
	/* USER CODE END ltdc */
};

&m4_dma2{
	status = "disabled";

	/* USER CODE BEGIN m4_dma2 */
	/* USER CODE END m4_dma2 */
};

&mdma1{
	status = "okay";

	/* USER CODE BEGIN mdma1 */
	/* USER CODE END mdma1 */
};

&pwr_regulators{
	status = "okay";

	/* USER CODE BEGIN pwr_regulators */
	vdd-supply = <&vdd>;
	vdd_3v3_usbfs-supply = <&vdd_usb>;
	/* USER CODE END pwr_regulators */
};

&rcc{
	u-boot,dm-pre-reloc;
	status = "okay";

	/* USER CODE BEGIN rcc */
	/* USER CODE END rcc */
};

&rng1{
	status = "okay";

	/* USER CODE BEGIN rng1 */
	/* USER CODE END rng1 */
};

&rtc{
	status = "okay";

	/* USER CODE BEGIN rtc */
	/* USER CODE END rtc */
};

&sdmmc2{
	u-boot,dm-pre-reloc;
	pinctrl-names = "default", "opendrain", "sleep";
	pinctrl-0 = <&sdmmc2_pins_mx>;
	pinctrl-1 = <&sdmmc2_opendrain_pins_mx>;
	pinctrl-2 = <&sdmmc2_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN sdmmc2 */
	non-removable;
	no-sd;
	no-sdio;
	mmc-ddr-3_3v;
	st,neg-edge;
	bus-width = <8>;
	vmmc-supply = <&v3v3>;
	vqmmc-supply = <&vdd>;
	/* USER CODE END sdmmc2 */
};

&tamp{
	status = "okay";

	/* USER CODE BEGIN tamp */
	/* USER CODE END tamp */
};

&timers13{
	status = "okay";

	/* USER CODE BEGIN timers13 */
	/* USER CODE END timers13 */

	pwm13:pwm{
		pinctrl-names = "default", "sleep";
		pinctrl-0 = <&tim13_pwm_pins_mx>;
		pinctrl-1 = <&tim13_pwm_sleep_pins_mx>;
		status = "okay";

		/* USER CODE BEGIN timers13_pwm */
		#pwm-cells = <2>;
		/* USER CODE END timers13_pwm */
	};
};

&timers2{
	status = "okay";
	/delete-property/dmas;
	/delete-property/dma-names;

	/* USER CODE BEGIN timers2 */
	/* USER CODE END timers2 */

	pwm1:pwm {
		pinctrl-names = "default", "sleep";
		pinctrl-0 = <&tim2_pwm_pins_mx>;
		pinctrl-1 = <&tim2_pwm_sleep_pins_mx>;
		status = "okay";

		/* USER CODE BEGIN timers2_pwm */
		/* USER CODE END timers2_pwm */
	};
};

&timers3{
	status = "okay";
	/delete-property/dmas;
	/delete-property/dma-names;

	/* USER CODE BEGIN timers3 */
	/* USER CODE END timers3 */

	pwm2:pwm {
		pinctrl-names = "default", "sleep";
		pinctrl-0 = <&tim3_pwm_pins_mx>;
		pinctrl-1 = <&tim3_pwm_sleep_pins_mx>;
		status = "okay";

		/* USER CODE BEGIN timers3_pwm */
		/* USER CODE END timers3_pwm */
	};
};

&timers1{
	

	/* USER CODE BEGIN timers3 */
	/* Enable DMA "ch1" for PWM input on TIM1_CH1 */
	dmas = <&dmamux1 13 0x400 0x80000001>;
	dma-names = "ch3";
	status = "okay";
	/* USER CODE END timers3 */
	
	pwm {
		pinctrl-names = "default", "sleep";
		pinctrl-0 = <&tim1_pins_mx>;
		pinctrl-1 = <&tim1_sleep_pins_mx>;
		status = "okay";

		/* USER CODE BEGIN timers1_pwm */
		/* USER CODE END timers1_pwm */
	};
};

&timers4{
	status = "okay";
	/delete-property/dmas;
	/delete-property/dma-names;

	/* USER CODE BEGIN timers4 */
	/* USER CODE END timers4 */

	pwm3:pwm {
		pinctrl-names = "default", "sleep";
		pinctrl-0 = <&tim4_pwm_pins_mx>;
		pinctrl-1 = <&tim4_pwm_sleep_pins_mx>;
		status = "okay";

		/* USER CODE BEGIN timers4_pwm */
		/* USER CODE END timers4_pwm */
	};
};

&uart4{
	u-boot,dm-pre-reloc;
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&uart4_pins_mx>;
	pinctrl-1 = <&uart4_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN uart4 */
	/delete-property/ dmas;
	/delete-property/ dma-names;
	/* USER CODE END uart4 */
};


&uart7{
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&uart7_pins_mx>;
	pinctrl-1 = <&uart7_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN uart7 */
	/* USER CODE END uart7 */
};

&usbphyc{
		u-boot,dm-pre-reloc;
		status = "okay";

		/* USER CODE BEGIN usbphyc */
		/* USER CODE END usbphyc */
};

&usbphyc_port0{
		u-boot,dm-pre-reloc;
		status = "okay";

		/* USER CODE BEGIN usbphyc_port0 */
		phy-supply = <&vdd_usb>;
		st,phy-tuning = <&usb_phy_tuning>;

		connector{
				compatible = "usb-a-connector";
				vbus-supply = <&v3v3>;
		};
		/* USER CODE END usbphyc_port0 */
};

&usbphyc_port1{
		u-boot,dm-pre-reloc;
		status = "okay";

		/* USER CODE BEGIN usbphyc_port1 */
		phy-supply = <&vdd_usb>;
		st,phy-tuning = <&usb_phy_tuning>;
		/* USER CODE END usbphyc_port1 */
};

&usbh_ehci{
	status = "okay";

	/* USER CODE BEGIN usbh_ehci */
	phys = <&usbphyc_port0>, <&usbphyc_port1 1>;
	phy-names = "usb", "usb";
	/* USER CODE END usbh_ehci */
};

&usbh_ohci{
	status = "okay";

	/* USER CODE BEGIN usbh_ohci */
	phys = <&usbphyc_port0>, <&usbphyc_port1 1>;
	phy-names = "usb", "usb";
	/* USER CODE END usbh_ohci */
};




/* USER CODE BEGIN addons */

&cpu0{
	cpu-supply = <&vddcore>;
};

&cpu1{
	cpu-supply = <&vddcore>;
};

&sram{

	dma_pool:dma_pool@0{
		reg = <0x50000 0x10000>;
		pool;
	};
};

/* USER CODE END addons */

&pinctrl {
	u-boot,dm-pre-reloc;

	eth1_pins_mx: eth1_mx-0 {
		pins1 {
			pinmux = <STM32_PINMUX('A', 1, AF11)>, /* ETH1_REF_CLK */
						<STM32_PINMUX('C', 1, AF11)>, /* ETH1_MDC */
						<STM32_PINMUX('G', 13, AF11)>, /* ETH1_TXD0 */
						<STM32_PINMUX('G', 14, AF11)>; /* ETH1_TXD1 */
			bias-disable;
			drive-push-pull;
			slew-rate = <1>;
		};
		pins2 {
			pinmux = <STM32_PINMUX('A', 2, AF11)>; /* ETH1_MDIO */
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};
		pins3 {
			pinmux = <STM32_PINMUX('A', 7, AF11)>, /* ETH1_CRS_DV */
						<STM32_PINMUX('C', 4, AF11)>, /* ETH1_RXD0 */
						<STM32_PINMUX('C', 5, AF11)>; /* ETH1_RXD1 */
			bias-disable;
		};
		pins4 {
			pinmux = <STM32_PINMUX('B', 11, AF11)>; /* ETH1_TX_EN */
		};
	};

	eth1_sleep_pins_mx: eth1_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('A', 1, ANALOG)>, /* ETH1_REF_CLK */
						<STM32_PINMUX('A', 2, ANALOG)>, /* ETH1_MDIO */
						<STM32_PINMUX('A', 7, ANALOG)>, /* ETH1_CRS_DV */
						<STM32_PINMUX('B', 11, ANALOG)>, /* ETH1_TX_EN */
						<STM32_PINMUX('C', 1, ANALOG)>, /* ETH1_MDC */
						<STM32_PINMUX('C', 4, ANALOG)>, /* ETH1_RXD0 */
						<STM32_PINMUX('C', 5, ANALOG)>, /* ETH1_RXD1 */
						<STM32_PINMUX('G', 13, ANALOG)>, /* ETH1_TXD0 */
						<STM32_PINMUX('G', 14, ANALOG)>; /* ETH1_TXD1 */
		};
	};

	i2c6_pins_mx: i2c6_mx-0 {
		u-boot,dm-pre-reloc;
		pins {
			u-boot,dm-pre-reloc;
			pinmux = <STM32_PINMUX('A', 11, AF2)>, /* I2C6_SCL */
						<STM32_PINMUX('A', 12, AF2)>; /* I2C6_SDA */
			bias-disable;
			drive-open-drain;
			slew-rate = <0>;
		};
	};

	i2c6_sleep_pins_mx: i2c6_sleep_mx-0 {
		u-boot,dm-pre-reloc;
		pins {
			u-boot,dm-pre-reloc;
			pinmux = <STM32_PINMUX('A', 11, ANALOG)>, /* I2C6_SCL */
						<STM32_PINMUX('A', 12, ANALOG)>; /* I2C6_SDA */
		};
	};

	lptim2_counter_pins_mx: lptim2_counter_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('D', 11, AF3)>, /* LPTIM2_IN2 */
						<STM32_PINMUX('D', 12, AF3)>; /* LPTIM2_IN1 */
			bias-disable;
		};
	};

	lptim2_counter_sleep_pins_mx: lptim2_counter_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('D', 11, ANALOG)>, /* LPTIM2_IN2 */
						<STM32_PINMUX('D', 12, ANALOG)>; /* LPTIM2_IN1 */
		};
	};

	sdmmc2_pins_mx: sdmmc2_mx-0 {
		u-boot,dm-pre-reloc;
		pins1 {
			u-boot,dm-pre-reloc;
			pinmux = <STM32_PINMUX('A', 8, AF9)>, /* SDMMC2_D4 */
						<STM32_PINMUX('B', 3, AF9)>, /* SDMMC2_D2 */
						<STM32_PINMUX('B', 4, AF9)>, /* SDMMC2_D3 */
						<STM32_PINMUX('B', 9, AF10)>, /* SDMMC2_D5 */
						<STM32_PINMUX('B', 14, AF9)>, /* SDMMC2_D0 */
						<STM32_PINMUX('B', 15, AF9)>, /* SDMMC2_D1 */
						<STM32_PINMUX('C', 7, AF10)>, /* SDMMC2_D7 */
						<STM32_PINMUX('E', 5, AF9)>, /* SDMMC2_D6 */
						<STM32_PINMUX('G', 6, AF10)>; /* SDMMC2_CMD */
			bias-pull-up;
			drive-push-pull;
			slew-rate = <1>;
		};
		pins2 {
			u-boot,dm-pre-reloc;
			pinmux = <STM32_PINMUX('E', 3, AF9)>; /* SDMMC2_CK */
			bias-pull-up;
			drive-push-pull;
			slew-rate = <3>;
		};
	};

	sdmmc2_opendrain_pins_mx: sdmmc2_opendrain_mx-0 {
		u-boot,dm-pre-reloc;
		pins1 {
			u-boot,dm-pre-reloc;
			pinmux = <STM32_PINMUX('A', 8, AF9)>, /* SDMMC2_D4 */
						<STM32_PINMUX('B', 3, AF9)>, /* SDMMC2_D2 */
						<STM32_PINMUX('B', 4, AF9)>, /* SDMMC2_D3 */
						<STM32_PINMUX('B', 9, AF10)>, /* SDMMC2_D5 */
						<STM32_PINMUX('B', 14, AF9)>, /* SDMMC2_D0 */
						<STM32_PINMUX('B', 15, AF9)>, /* SDMMC2_D1 */
						<STM32_PINMUX('C', 7, AF10)>, /* SDMMC2_D7 */
						<STM32_PINMUX('E', 5, AF9)>; /* SDMMC2_D6 */
			bias-pull-up;
			drive-push-pull;
			slew-rate = <1>;
		};
		pins2 {
			u-boot,dm-pre-reloc;
			pinmux = <STM32_PINMUX('E', 3, AF9)>; /* SDMMC2_CK */
			bias-pull-up;
			drive-push-pull;
			slew-rate = <3>;
		};
		pins3 {
			u-boot,dm-pre-reloc;
			pinmux = <STM32_PINMUX('G', 6, AF10)>; /* SDMMC2_CMD */
			bias-pull-up;
			drive-open-drain;
			slew-rate = <1>;
		};
	};

	sdmmc2_sleep_pins_mx: sdmmc2_sleep_mx-0 {
		u-boot,dm-pre-reloc;
		pins {
			u-boot,dm-pre-reloc;
			pinmux = <STM32_PINMUX('A', 8, ANALOG)>, /* SDMMC2_D4 */
						<STM32_PINMUX('B', 3, ANALOG)>, /* SDMMC2_D2 */
						<STM32_PINMUX('B', 4, ANALOG)>, /* SDMMC2_D3 */
						<STM32_PINMUX('B', 9, ANALOG)>, /* SDMMC2_D5 */
						<STM32_PINMUX('B', 14, ANALOG)>, /* SDMMC2_D0 */
						<STM32_PINMUX('B', 15, ANALOG)>, /* SDMMC2_D1 */
						<STM32_PINMUX('C', 7, ANALOG)>, /* SDMMC2_D7 */
						<STM32_PINMUX('E', 3, ANALOG)>, /* SDMMC2_CK */
						<STM32_PINMUX('E', 5, ANALOG)>, /* SDMMC2_D6 */
						<STM32_PINMUX('G', 6, ANALOG)>; /* SDMMC2_CMD */
		};
	};

	tim13_pwm_pins_mx: tim13_pwm_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('F', 8, AF9)>; /* TIM13_CH1 */
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};
	};

	tim13_pwm_sleep_pins_mx: tim13_pwm_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('F', 8, ANALOG)>; /* TIM13_CH1 */
		};
	};

	tim2_pwm_pins_mx: tim2_pwm_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('G', 8, AF1)>; /* TIM2_CH1 */
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};
	};

	tim2_pwm_sleep_pins_mx: tim2_pwm_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('G', 8, ANALOG)>; /* TIM2_CH1 */
		};
	};

	tim3_pwm_pins_mx: tim3_pwm_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('A', 6, AF2)>; /* TIM3_CH1 */
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};
	};

	tim3_pwm_sleep_pins_mx: tim3_pwm_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('A', 6, ANALOG)>; /* TIM3_CH1 */
		};
	};

	tim4_pwm_pins_mx: tim4_pwm_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('B', 8, AF2)>; /* TIM4_CH3 */
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};
	};

	tim4_pwm_sleep_pins_mx: tim4_pwm_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('B', 8, ANALOG)>; /* TIM4_CH3 */
		};
	};
	
	tim1_pins_mx: tim1_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('E', 14, AF1)>; /* TIM1_CH4 */
			bias-disable;
		};
	};

	tim1_sleep_pins_mx: tim1_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('E', 14, ANALOG)>; /* TIM1_CH4 */
		};
	};

	uart4_pins_mx: uart4_mx-0 {
		u-boot,dm-pre-reloc;
		pins1 {
			u-boot,dm-pre-reloc;
			pinmux = <STM32_PINMUX('B', 2, AF8)>; /* UART4_RX */
			bias-disable;
		};
		pins2 {
			u-boot,dm-pre-reloc;
			pinmux = <STM32_PINMUX('G', 11, AF6)>; /* UART4_TX */
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};
	};

	uart4_sleep_pins_mx: uart4_sleep_mx-0 {
		u-boot,dm-pre-reloc;
		pins {
			u-boot,dm-pre-reloc;
			pinmux = <STM32_PINMUX('B', 2, ANALOG)>, /* UART4_RX */
						<STM32_PINMUX('G', 11, ANALOG)>; /* UART4_TX */
		};
	};

	uart7_pins_mx: uart7_mx-0 {
		pins1 {
			pinmux = <STM32_PINMUX('E', 7, AF7)>; /* UART7_RX */
			bias-disable;
		};
		pins2 {
			pinmux = <STM32_PINMUX('E', 8, AF7)>; /* UART7_TX */
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};
	};

	uart7_sleep_pins_mx: uart7_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('E', 7, ANALOG)>, /* UART7_RX */
						<STM32_PINMUX('E', 8, ANALOG)>; /* UART7_TX */
		};
	};

	/* USER CODE BEGIN pinctrl */
	/* USER CODE END pinctrl */
};

&pinctrl_z {
	u-boot,dm-pre-reloc;

	i2c4_pins_z_mx: i2c4_mx-0 {
		u-boot,dm-pre-reloc;
		pins {
			u-boot,dm-pre-reloc;
			pinmux = <STM32_PINMUX('Z', 4, AF6)>, /* I2C4_SCL */
						<STM32_PINMUX('Z', 5, AF6)>; /* I2C4_SDA */
			bias-disable;
			drive-open-drain;
			slew-rate = <0>;
		};
	};

	i2c4_sleep_pins_z_mx: i2c4_sleep_mx-0 {
		u-boot,dm-pre-reloc;
		pins {
			u-boot,dm-pre-reloc;
			pinmux = <STM32_PINMUX('Z', 4, ANALOG)>, /* I2C4_SCL */
						<STM32_PINMUX('Z', 5, ANALOG)>; /* I2C4_SDA */
		};
	};

	/* USER CODE BEGIN pinctrl_z */
	/* USER CODE END pinctrl_z */
};

